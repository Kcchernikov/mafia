# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mafia_pb2 as mafia__pb2


class MafiaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/mafia.Mafia/Connect',
                request_serializer=mafia__pb2.Request.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.ChooseRoom = channel.unary_unary(
                '/mafia.Mafia/ChooseRoom',
                request_serializer=mafia__pb2.ChooseRoomRequest.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.SetName = channel.unary_unary(
                '/mafia.Mafia/SetName',
                request_serializer=mafia__pb2.Request.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.WaitStart = channel.unary_stream(
                '/mafia.Mafia/WaitStart',
                request_serializer=mafia__pb2.Request.SerializeToString,
                response_deserializer=mafia__pb2.MemberResponse.FromString,
                )
        self.GameProcess = channel.unary_stream(
                '/mafia.Mafia/GameProcess',
                request_serializer=mafia__pb2.Request.SerializeToString,
                response_deserializer=mafia__pb2.GameResponse.FromString,
                )
        self.Vote = channel.unary_unary(
                '/mafia.Mafia/Vote',
                request_serializer=mafia__pb2.Request.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.SetReady = channel.unary_unary(
                '/mafia.Mafia/SetReady',
                request_serializer=mafia__pb2.Request.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.Kill = channel.unary_unary(
                '/mafia.Mafia/Kill',
                request_serializer=mafia__pb2.Request.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.Check = channel.unary_unary(
                '/mafia.Mafia/Check',
                request_serializer=mafia__pb2.Request.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.PublishData = channel.unary_unary(
                '/mafia.Mafia/PublishData',
                request_serializer=mafia__pb2.Request.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )


class MafiaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChooseRoom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Vote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Kill(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MafiaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=mafia__pb2.Request.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'ChooseRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.ChooseRoom,
                    request_deserializer=mafia__pb2.ChooseRoomRequest.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'SetName': grpc.unary_unary_rpc_method_handler(
                    servicer.SetName,
                    request_deserializer=mafia__pb2.Request.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'WaitStart': grpc.unary_stream_rpc_method_handler(
                    servicer.WaitStart,
                    request_deserializer=mafia__pb2.Request.FromString,
                    response_serializer=mafia__pb2.MemberResponse.SerializeToString,
            ),
            'GameProcess': grpc.unary_stream_rpc_method_handler(
                    servicer.GameProcess,
                    request_deserializer=mafia__pb2.Request.FromString,
                    response_serializer=mafia__pb2.GameResponse.SerializeToString,
            ),
            'Vote': grpc.unary_unary_rpc_method_handler(
                    servicer.Vote,
                    request_deserializer=mafia__pb2.Request.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'SetReady': grpc.unary_unary_rpc_method_handler(
                    servicer.SetReady,
                    request_deserializer=mafia__pb2.Request.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'Kill': grpc.unary_unary_rpc_method_handler(
                    servicer.Kill,
                    request_deserializer=mafia__pb2.Request.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=mafia__pb2.Request.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'PublishData': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishData,
                    request_deserializer=mafia__pb2.Request.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mafia.Mafia', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mafia(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/Connect',
            mafia__pb2.Request.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChooseRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/ChooseRoom',
            mafia__pb2.ChooseRoomRequest.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/SetName',
            mafia__pb2.Request.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mafia.Mafia/WaitStart',
            mafia__pb2.Request.SerializeToString,
            mafia__pb2.MemberResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mafia.Mafia/GameProcess',
            mafia__pb2.Request.SerializeToString,
            mafia__pb2.GameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Vote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/Vote',
            mafia__pb2.Request.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/SetReady',
            mafia__pb2.Request.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Kill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/Kill',
            mafia__pb2.Request.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/Check',
            mafia__pb2.Request.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/PublishData',
            mafia__pb2.Request.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
